package model;

import java.util.Random;
import java.util.HashMap;
import java.util.Map;
import enums.Gender;
import file.NameAnalyzer;

/**********************
 * Class: MarkovModel *
 **********************
 * Description:
 * 		A class representing the finished Markov model.
 * Variables:
 * 		model:	A HashMap that maps pattern Strings to another HashMap
 * 				which in turn maps characters to the decimal probability
 * 				that they will follow the pattern string.
 * 		order:	The order of the Markov model
 */
public class MarkovModel {
	public HashMap<String, HashMap<Character, Float>> model;
	private int order;
	
	// Constructor
	public MarkovModel(Gender gender, int order)
	{
		this.order = order;
		NameAnalyzer na = new NameAnalyzer(gender, order);
		model = na.PopulateModel();
		Percentify();
	}
	
	/**************
	 * Percentify *
	 **************
	 * Takes the HashMap obtained from the NameAnalyzer class and converts the number
	 * of times each character appears to a percent probability that it will
	 * follow its corresponding pattern string.
	 * Arguments:		None
	 * Return values:	None
	 */
	private void Percentify()
	{
		float currNum;
		float total;
		for(Map.Entry<String, HashMap<Character, Float>> entry : model.entrySet())
		{
			// The '~', or total quantity, will be the denominator.
			total = entry.getValue().get('~');
			for(Map.Entry<Character, Float> entry2 : entry.getValue().entrySet())
			{
				// Don't convert the total quantity.
				if(!entry2.getKey().equals('~'))
				{
					// The quantity of each character will be its respective numerator.
					currNum = entry2.getValue();
					model.get(entry.getKey()).put(entry2.getKey(), currNum / total);
				}
			}
		}
	}
	
	/****************
	 * GenerateName *
	 ****************
	 * Generates a name randomly based on the Markov model.
	 */
	public String GenerateName(int length)
	{
		// Initialize the Random object
		Random rand = new Random(System.currentTimeMillis());
		String name = "";
		String currString = "_";
		// GetNextChar gets the next character in the name
		char nextChar = GetNextChar(currString, rand);
		// '_' indicates the current pattern should be followed
		// by the end of the name
		while(nextChar != '_' && name.length() < length)
		{
			// Add the next character to the pattern string and the final name
			currString += nextChar;
			name += nextChar;
			// Make sure the current pattern string is always <= the order
			if(currString.length() > order)
			{
				currString = currString.substring(currString.length() - order);
			}
			nextChar = GetNextChar(currString, rand);
		}
		return name;
	}
	
	/***************
	 * GetNextChar *
	 ***************
	 * Using the Markov model and a random number generator, determines
	 * which character should follow the given pattern string.
	 * 
	 * The function first generates a random float from 0.0 to 1.0,
	 * then compares it with a percent probability. The probability
	 * is generated by sequentially adding the probabilities of each
	 * character; the end result is equivalent to "0.0 to 0.1 is 'a',
	 * 0.1 to 0.25 is 'b', etc."
	 * Arguments:
	 * 		s:		The pattern string
	 * 		rand:	A Math.Random object
	 */
	public char GetNextChar(String s, Random rand)
	{
		float RNG = rand.nextFloat();
		// The percent starts at zero
		float currPercent = 0.0f;
		// Make sure the model contains the key in the first place
		if(model.containsKey(s))
		{
			// Get the appropriate hash map for the pattern string 
			HashMap<Character, Float> map = model.get(s);
			for(Map.Entry<Character, Float> entry : map.entrySet())
			{
				// Ignore the "total" key, '~'
				if(entry.getKey() != '~')
				{
					// Add the probability of the current char
					// to the total, then compare the RNG value to it.
					currPercent += entry.getValue();
					if(RNG < currPercent)
					{
						// If the RNG value is in the appropriate range,
						// return the character
						return entry.getKey();
					}
				}
			}
		}
		// If the pattern string isn't in the model,
		// return the "end of name" character.
		return '_';
	}
}
